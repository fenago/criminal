{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.1","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":0,"cells":[{"metadata":{"collapsed":false,"_uuid":"0f623d8945fa16bea8762467adacb77bdbee44f0","_execution_state":"idle"},"source":"Classification for High and Low Criminal rates based on ethinicity","execution_count":null,"cell_type":"markdown","outputs":[]},{"metadata":{"_cell_guid":"db1c0eae-0781-4b12-9d00-6bf4f508fc6d","_uuid":"1c9d0d51195dcd30b0e8bee6c47ef1ea52bad99d","trusted":false,"_execution_state":"idle"},"source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\ndf = pd.read_csv('../input/compas-scores-raw.csv',low_memory = False, encoding='ISO-8859-1')","execution_count":3,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"4fa8ad965aef7edf6334642d09a9847b49a30dda","_execution_state":"idle"},"execution_count":4,"cell_type":"code","outputs":[],"source":"df.head()"},{"metadata":{"collapsed":false,"_uuid":"85c7f59fab2a8d38dd422347c78b93b5cda6f8f8","_execution_state":"idle"},"source":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder_X = LabelEncoder()\ndf['RecSupervisionLevelText']=labelencoder_X.fit_transform(df['RecSupervisionLevelText'])\ndf['Ethnic_Code_Text']=labelencoder_X.fit_transform(df['Ethnic_Code_Text'])\ndf['Ethnic_Code_Text'].unique()","execution_count":6,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"a52c79b6592c496627d3a61019cc85d9ea235c64","_execution_state":"idle"},"source":"count_classes = pd.value_counts(df['RecSupervisionLevelText'], sort = True).sort_index()\ncount_classes.plot(kind = 'bar')\nplt.title(\"Crime Rate histogram\")\nplt.xlabel(\"Rate\")\nplt.ylabel(\"Frequency\")\n","execution_count":7,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"3aa7342dd7c0f6e590b4a2780af8425fb71930eb","_execution_state":"idle"},"source":"X = df.iloc[:, [8,22]].values\ny = df.iloc[:, 19].values\n\n           ","execution_count":8,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"dc8a704f9858d32096647d31cffdd0c140507a6b","_execution_state":"idle"},"source":"low_crime_rate = len(df[df.RecSupervisionLevelText == 0])\nlow_crime_indices = np.array(df[df.RecSupervisionLevelText == 0].index)\n\n# Picking the indices of the normal classes\nhigh_crime_indices = df[df.RecSupervisionLevelText == 1].index\nrandom_high_indices = np.random.choice(high_crime_indices, low_crime_rate, replace = False)        \nrandom_high_indices = np.array(random_high_indices)             \n           \n           \n\nunder_sample_indices = np.concatenate([random_high_indices,low_crime_indices])   \n\nprint(random_high_indices)\n# Under sample dataset\nunder_sample_data = df.iloc[under_sample_indices,:]\nx_sample=under_sample_data.iloc[:, [8,22]].values\ny_sample = under_sample_data.iloc[:, 19].values\n                                 \n                                 \nx_sample[np.isnan(x_sample)] = 0                  \ny_sample[np.isnan(y_sample)] = 0                                \n# Showing ratio\nprint(\"Percentage of Low Crime: \", len(under_sample_data[under_sample_data.RecSupervisionLevelText == 0])/len(under_sample_data))\nprint(\"Percentage of High Crime: \", len(under_sample_data[under_sample_data.RecSupervisionLevelText == 1])/len(under_sample_data))\nprint(\"Total number of transactions in resampled data: \", len(under_sample_data))  ","execution_count":9,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"237b884881352fff7426dbd6f0e0d896828afcbc","_execution_state":"idle"},"source":"from sklearn.cross_validation import train_test_split\nX_train_undersample, X_test_undersample, y_train_undersample, y_test_undersample = train_test_split(x_sample\n                                                                                                   ,y_sample\n                                                                                                   ,test_size = 0.25\n                                                                                                   ,random_state = 0)\n\n\nprint(\"\")\nprint(\"Number transactions train dataset: \", len(X_train_undersample))\nprint(\"Number transactions test dataset: \", len(X_test_undersample))\nprint(\"Total number of transactions: \", len(X_train_undersample)+len(X_test_undersample))\n","execution_count":10,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"ab6af0a8d7c2a7cbe5044410d1d3fb81842ec658","_execution_state":"idle"},"source":"from sklearn.cross_validation import KFold, cross_val_score\nfrom sklearn.metrics import confusion_matrix,precision_recall_curve,auc,roc_auc_score,roc_curve,recall_score,classification_report \n\nfrom sklearn.svm import SVC\n\nclassifier = SVC(kernel = 'rbf', random_state = 42,C=10,probability=True)\n\nclassifier.fit(X_train_undersample, y_train_undersample)\n\ny_pred = classifier.predict(X_test_undersample)\n\ncm = confusion_matrix(y_test_undersample, y_pred)\n\nprint(\"Condusion Matrix\",cm)","execution_count":12,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"14ed39148faf7203efbe6f3cf1c3730c2cc2c598","_execution_state":"idle"},"source":"accuracies=cross_val_score(classifier,X=X_train_undersample,y=y_train_undersample,cv=10,n_jobs=-1)\nfinal_perf=accuracies.mean()\nfinal_stdv=accuracies.std()\n\nprint(\"find best performance\",final_perf)\nprint(\"Model Variance\",final_stdv)","execution_count":13,"cell_type":"code","outputs":[]},{"metadata":{"collapsed":false,"_uuid":"91a1da129ef0161aaf5f8d9c3a4ac3b732562d6f","_execution_state":"idle"},"source":"from sklearn.model_selection import GridSearchCV\nparameter=[ {'C':[1,10,100,1000],'kernel':['linear']},\n            {'C':[1,10,100,1000],'kernel':['rbf'],'gamma':[0.5,0.1,0.01,0.001,0.0001]}\n           ]\ngrissearch=GridSearchCV(estimator=classifier,param_grid=parameter,scoring='accuracy',cv=10,n_jobs=-1)\n\ngrissearch=grissearch.fit(X_train_undersample,y_train_undersample)\n\nbest_accurancy=grissearch.best_score_\nbest_parameters=grissearch.best_paramas_","execution_count":null,"cell_type":"code","outputs":[]}]}